# 딕셔너리란?
# 사람은 누구든지 "이름" = "홍길동", "생일" = "몇 월 며칠" 등으로 구별할 수 있다.
# 파이썬은 영리하게도 이러한 대응 관계를 나타낼 수 있는 자료형을 가지고 있다.
# 요즘 사용하는 대부분의 언어도 이러한 대응 관계를 나타내는 자료형을 갖고 있는데 , 이를 연관 배열 또는 해시라고한다

# 파이썬에서는 이러한 자료형을 딕셔너리(Dictionary)라고 하는데 , 단어 그대로 해석하면 사전이라는 뜻이다.
# 즉 "people"이라는 단어에 "사람" , "baseball"이라는 단어에 "야구" 라는 뜻이 부합되듯이 딕셔너리는
# Key와 Value를 한 쌍으로 갖는 자료형이다. 예컨데 Key가 "baseball"이라면 Value는 "야구"가 될 것이다.

# 딕셔너리는 리스트나 튜플처럼 순차적으로 해당 요솟값을 구하지 않고 Key를 통해 Value를 얻는다.
# 이것이 바로 딕셔너리의 가장 큰 특징이다 baseball이라는 단어의 뜻을 찾기 위해 사전의 내용을 순차적으로 모두 검색하는 것이 아니라
# baseball이라는 단어가 있는 곳만 펼처 보는 것이다.

# 다음은 기본 딕셔너리의 모습이다
# {Key1:Value1, Key2:Value2, Key3:Value3, ...}

# 딕셔너리 쌍 추가하기

a = {1:'a'}
a[2] = 'b'
print (a)

a['name'] = 'pey'
print (a)

a[3] = [1,2,3]
print (a)

# 딕셔너리 요소 삭제하기

del a[1]
print (a)

# 딕셔너리를 사용하는 방법
# 딕셔너리는 주로 어떤 것을 표현하는 데 사용 할까 ? 라는 의문이 들 것이다
# 예를 들어 4명의 사람이 있다고 가정하고 , 각자의 특기를 표현할 수 있는 좋은 방법에 대해서 생각해 보자.
# 리스트나 문자열로는 표현하기가 상당히 까다로울 것이다. 하지만 파이썬의 딕셔너리를 사용한다면 이 상황을 표현하기가 정말 쉽다.

# 딕셔너리에서 Key 사용해 Value 얻기

grade = {'pey': 10 , 'julliet' : 99}
print (grade ['pey'])
print (grade['julliet'])

a = {1:'a',2:'b'}
print (a[1])
print (a[2])